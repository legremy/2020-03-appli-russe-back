security:
    encoders:
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users_in_memory: { memory: null }
        users:
            entity:
                class: 'App\Entity\User'
                property: "email"

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # Provides a way to create a new user (against api firewall)
        registration:
            pattern: ^/api/users
            anonymous: true
            stateless: true
            methods: [POST]
        login:
            pattern: ^/api/login
            stateless: true
            anonymous: true
            json_login:
                provider: users
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api
            stateless: true
            anonymous: true
            guard:
                provider: users
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        main:
            anonymous: lazy
            provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication
            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/dictionnaire, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/words, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/types, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/traductions, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/users, roles: IS_AUTHENTICATED_FULLY, methods:[GET, PUT, DELETE, PATCH] }
        # - { path: ^/profile, roles: ROLE_USER }
